def cancelPreviousBuilds() {
    def jobName = env.JOB_NAME
    def buildNumber = env.BUILD_NUMBER.toInteger()
    /* Get job name */
    def currentJob = Jenkins.instance.getItemByFullName(jobName)

    /* Iterating over the builds for specific job */
    for (def build : currentJob.builds) {
        def exec = build.getExecutor()
        /* If there is a build that is currently running and it's not current build */
        if (build.isBuilding() && build.number.toInteger() != buildNumber && exec != null) {
            /* Then stop it */
            exec.interrupt(
                    Result.ABORTED,
                    new CauseOfInterruption.UserInterruption("Aborted by #${currentBuild.number}")
                )
            println("Aborted previously running build #${build.number}")
        }
    }
}
pipeline {
    agent any
    stages {
      stage('Init') {
          agent { label 'master' }
          steps {
              script {
                  cancelPreviousBuilds()
              }
          }
      }
       stages {
            stage('SCM checkout') {
                  steps {
                        git url: 'https://github.com/Nouman72884/flask-examples.git'
                        }
             }
             stage('preparation') {
                   steps {
                         sh 'sudo apt-get install python-pip -y'
                         sh 'pip install wheel'
                         }
              }
              stage('preparation 2') {
                    steps {
                          sh 'pip wheel  -r requirements.txt'
                          }
               }
              stage('transfer artifacts') {
                    steps {
                          sshPublisher(publishers: [sshPublisherDesc(configName: 'webserver', transfers: [sshTransfer(excludes: '', execCommand: 'sudo apt-get install python-pip -y;cd /tmp/tmp/;pip install *.whl;sudo apt install python3-flask -y;cd 01-hello-world/;export FLASK_APP=hello.py;flask run --host=0.0.0.0', execTimeout: 3000000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/tmp', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '**/*')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
                          }
              }
       }
}
